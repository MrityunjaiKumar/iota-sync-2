"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[667],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=i,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},436:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:7},o="06 Experiment",c={unversionedId:"AVR_Embedded_C/Exp6",id:"AVR_Embedded_C/Exp6",title:"06 Experiment",description:"Intensity variation of LED based on potentiometer value",source:"@site/docs/04_AVR_Embedded_C/06_Exp6.md",sourceDirName:"04_AVR_Embedded_C",slug:"/AVR_Embedded_C/Exp6",permalink:"/docs/AVR_Embedded_C/Exp6",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"05 Experiment",permalink:"/docs/AVR_Embedded_C/Exp5"},next:{title:"07 Experiment",permalink:"/docs/AVR_Embedded_C/Exp7"}},p={},l=[{value:"Source  and description",id:"source--and-description",level:2}],s={toc:l};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"06-experiment"},"06 Experiment"),(0,i.kt)("p",null,"Intensity variation of LED based on potentiometer value"),(0,i.kt)("h2",{id:"source--and-description"},"Source  and description"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://sincgrid.in/avr-tutorials/avr-tutorial-experiment-6/"},"http://sincgrid.in/avr-tutorials/avr-tutorial-experiment-6/")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="http://sincgrid.in/avr-tutorials/avr-tutorial-experiment-6/"',title:'"http://sincgrid.in/avr-tutorials/avr-tutorial-experiment-6/"'},"#include <avr/io.h>\n#define F_CPU 16000000UL\n#include <avr/delay.h>\n\nint adc_value;        //Variable used to store the value read from the ADC converter\n\nint main(void){\n\n//    unsigned char i=0;\n\n    DDRD|= _BV(DDD6);    //Set our pwm pin as an output\n\n    //Timer configuration\n    TCCR0A = ((1<<COM0A1)|(1<<WGM01)|(1<<WGM00));    //Enable pwm mode in pin PD6 and set the WGM bits to Fast pwm mode\n    TCCR0B = ((1<<CS01)|(1<<CS00));                  //Set prescaler to 32\n\n    ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //Prescaler at 128 so we have an 125Khz clock source\n    ADMUX |= (1<<REFS0);\n    ADMUX &= ~(1<<REFS1);                        //Avcc(+5v) as voltage reference\n    ADCSRB &= ~((1<<ADTS2)|(1<<ADTS1)|(1<<ADTS0));    //ADC in free-running mode\n    ADCSRA |= (1<<ADATE);                        //Signal source, in this case is the free-running\n    ADCSRA |= (1<<ADEN);                        //Power up the ADC\n    ADCSRA |= (1<<ADSC);                        //Start converting\n\n    for(;;)\n    {\n\n    adc_value = ADCW;    \n    OCR0A = adc_value/4 - 24;\n    _delay_ms(1000);\n\n    }\n\n    return 0;\n}\n")))}d.isMDXComponent=!0}}]);