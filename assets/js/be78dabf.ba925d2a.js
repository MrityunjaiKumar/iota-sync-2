"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2338],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=l(r),m=i,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(f,a(a({ref:t},s),{},{components:r})):n.createElement(f,a({ref:t},s))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:i,a[1]=p;for(var l=2;l<o;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1379:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var n=r(7462),i=(r(7294),r(3905));const o={sidebar_position:6},a="05 Experiment",p={unversionedId:"AVR_Embedded_C/Exp5",id:"AVR_Embedded_C/Exp5",title:"05 Experiment",description:"Toggle the LED every second using Timer interrupt.",source:"@site/docs/04_AVR_Embedded_C/05_Exp5.md",sourceDirName:"04_AVR_Embedded_C",slug:"/AVR_Embedded_C/Exp5",permalink:"/docs/AVR_Embedded_C/Exp5",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"04 Experiment",permalink:"/docs/AVR_Embedded_C/Exp4"},next:{title:"06 Experiment",permalink:"/docs/AVR_Embedded_C/Exp6"}},c={},l=[{value:"Source  and description",id:"source--and-description",level:2}],s={toc:l};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"05-experiment"},"05 Experiment"),(0,i.kt)("p",null,"Toggle the LED every second using Timer interrupt."),(0,i.kt)("h2",{id:"source--and-description"},"Source  and description"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://sincgrid.in/avr-tutorials/avr-tutorial-experiment-5/"},"http://sincgrid.in/avr-tutorials/avr-tutorial-experiment-5/")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="http://sincgrid.in/avr-tutorials/avr-tutorial-experiment-5/"',title:'"http://sincgrid.in/avr-tutorials/avr-tutorial-experiment-5/"'},"#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#define LED PD4\n\nISR (TIMER1_OVF_vect)    // Timer1 ISR\n{\n    PORTD ^= (1 << LED);\n    TCNT1 = 49916;   // for 1 sec at 16 MHz\n}\n\nint main()\n{\n    DDRD = (0x01 << LED);     //Configure the PORTD4 as output\n\n    TCNT1 = 49916;   // for 1 sec at 16 MHz\n\n    TCCR1A = 0x00;\n    TCCR1B = (1<<CS10) | (1<<CS12);;  // Timer mode with 1024 prescler\n    TIMSK1 = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)\n    sei();        // Enable global interrupts by setting global interrupt enable bit in SREG\n\n    while(1)\n    {\n\n    }\n}\n")))}u.isMDXComponent=!0}}]);