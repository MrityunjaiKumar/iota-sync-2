"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5924],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>p});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},_=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),_=s(t),p=i,f=_["".concat(l,".").concat(p)]||_[p]||u[p]||o;return t?r.createElement(f,a(a({ref:n},c),{},{components:t})):r.createElement(f,a({ref:n},c))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=_;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d.mdxType="string"==typeof e?e:i,a[1]=d;for(var s=2;s<o;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}_.displayName="MDXCreateElement"},7811:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>s});var r=t(7462),i=(t(7294),t(3905));const o={sidebar_position:8},a="07 Experiment",d={unversionedId:"AVR_Embedded_C/Exp7",id:"AVR_Embedded_C/Exp7",title:"07 Experiment",description:"Creating different colors using RGB LEDs",source:"@site/docs/04_AVR_Embedded_C/07_Exp7.md",sourceDirName:"04_AVR_Embedded_C",slug:"/AVR_Embedded_C/Exp7",permalink:"/docs/AVR_Embedded_C/Exp7",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"06 Experiment",permalink:"/docs/AVR_Embedded_C/Exp6"},next:{title:"07 Experiment",permalink:"/docs/AVR_Embedded_C/Exp8"}},l={},s=[{value:"Source  and description",id:"source--and-description",level:2}],c={toc:s};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"07-experiment"},"07 Experiment"),(0,i.kt)("p",null,"Creating different colors using RGB LEDs"),(0,i.kt)("h2",{id:"source--and-description"},"Source  and description"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://sincgrid.in/avr-tutorials/avr-tutorial-experiment-7/"},"http://sincgrid.in/avr-tutorials/avr-tutorial-experiment-7/")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="http://sincgrid.in/avr-tutorials/avr-tutorial-experiment-7/"',title:'"http://sincgrid.in/avr-tutorials/avr-tutorial-experiment-7/"'},"#include <avr/io.h>\n\n#include <avr/io.h>\n#include <stdlib.h> //for itoa\n#include <stdlib.h> //for abs()\n#define F_CPU 16000000UL\n#include <util/delay.h>\n#define BAUDRATE 9600\n#define BAUD_PRESCALLER (((F_CPU / (BAUDRATE * 16UL))) - 1)\n\n#define Down_button 0\n#define Left_button 770\n#define Right_button 510\n#define Center_button 680\n#define Up_button 820\n#define button_margin 20\n\n#define rled_pwm_threshold OCR1A \n#define gled_pwm_threshold OCR1B\n#define bled_pwm_threshold OCR2A \nchar buffer[16]; //Output of the itoa function\n\nuint16_t led_selected=0; \n/************************************************************************/\n/* \n0 -> no led is selected\n1 -> r selected \n2 -> g selected \n3 -> b selected                                                                     \n*/\n/************************************************************************/\n\nvoid adc_init(void); //Function to initialize/configure the ADC\nuint16_t read_adc(uint8_t channel); //Function to read an arbitrary analog channel/pin\nvoid USART_init(void); //Function to initialize and configure the USART/serial\nvoid USART_send( unsigned char data); //Function that sends a char over the serial port\nvoid USART_putstring(char* StringPtr); //Function that sends a string over the serial port\nvoid send_data_to_pc(uint32_t dump);\n\nlong map(long x, long in_min, long in_max, long out_min, long out_max)\n{\n    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\nuint16_t naviButton (uint16_t raw ){\n    if(raw < 1020){  //one of navigation button is pressed\n\n        if(abs(raw-Up_button)<button_margin){ // up button is pressed\n            return 1;\n        }else if(abs(raw-Left_button)<button_margin){\n            return 2;\n        }else if(abs(raw-Down_button)<button_margin){\n            return 3;\n        }else if(abs(raw-Right_button)<button_margin){\n            return 4;\n        }else if(abs(raw-Center_button)<button_margin){\n            return 5;\n        }\n\n    }\n        return 0;\n}\n\nvoid selectNextLed(uint8_t buttonSelected){\n    if(buttonSelected==2){ //left circular shift  0 1 2 3\n        if(led_selected==0){\n            led_selected=3;\n        }else if(led_selected==1){\n            led_selected=3;\n        }else if(led_selected==2){\n            led_selected=1;\n        }else if(led_selected==3){\n            led_selected=2;\n        }\n    }else if(buttonSelected==4){//right circular shift  0 1 2 3\n\n            if(led_selected==0){\n            led_selected=1;\n            }else if(led_selected==1){\n            led_selected=2;\n            }else if(led_selected==2){\n            led_selected=3;\n            }else if(led_selected==3){\n            led_selected=1;\n        }\n    }\n}\n\nint main(void){\nadc_init(); //Setup the ADC\nUSART_init(); //Setup the USART\n\n//PWM1&2 initialisation\nTCCR1A = 0b10100001;// set PWM mode for PB1 and PB2\nTCCR1B = 0b00000010; //set clock:8 prescaler\n\n//PWM3 initialisation\nTCCR2A = 0b10000001; // set PWM mode for PB3\nTCCR2B = 0b00000010; //set clock:8 prescaler\nDDRB = 0xFF; //set portB as output\n\nwhile(1){\n    volatile uint16_t navi_adc= read_adc(1);\n    /*\n    * \n    Idle -> 0\n    up button -> 1 \n    Down button -> 3\n    Left button -> 2\n    Right button -> 4\n    center button -> 5\n    */\n    uint8_t button_pressed =naviButton(navi_adc); \n    _delay_ms(200);\n    if(button_pressed!=0){//either left or right button is pressed\n\n        if((button_pressed == 2) | (button_pressed == 4) ){\n            selectNextLed(button_pressed);\n            }\n        if(button_pressed == 5){ //center button is pressed\n            led_selected=0;        //reset selected led\n        }\n\n    }\n\n    if(led_selected!=0){ //atleast a led is selected\n        uint16_t pot_value = map(read_adc(0),100,1023,0,255); // adc give 10bit converting it to 8 bit\n        //100 is selected because of pot offset\n        send_data_to_pc(pot_value);\n        if(led_selected ==1){\n            rled_pwm_threshold = pot_value;\n        }else if(led_selected ==2){\n            gled_pwm_threshold = pot_value;            \n        }else if(led_selected ==3){\n            bled_pwm_threshold = pot_value;\n        }\n        _delay_ms(50);\n\n    }\n}\n\nreturn 0;\n}\n\nvoid send_data_to_pc(uint32_t dump){\n\nitoa(dump, buffer, 10); //Convert the read value to an ascii string\n/*char * itoa ( int value, char * str, int base );*/\nUSART_putstring(buffer); //Send the converted value to the terminal\nUSART_putstring(\" \"); //Some more formatting\n\nUSART_send('\\r');\nUSART_send('\\n');\n}\n\nvoid adc_init(void){\nADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)); //16Mhz/128 = 125Khz the ADC reference clock\nADMUX |= (1<<REFS0); //Voltage reference from Avcc (5v)\nADCSRA |= (1<<ADEN); //Turn on ADC\nADCSRA |= (1<<ADSC); //Do an initial conversion because this one is the slowest\n//and to ensure that everything is up and running\n}\n\nuint16_t read_adc(uint8_t channel){\nADMUX &= 0xF0; //Clear the older channel that was read\nADMUX |= channel; //Defines the new ADC channel to be read\nADCSRA |= (1<<ADSC); //Starts a new conversion\nwhile(ADCSRA & (1<<ADSC)); //Wait until the conversion is done\nreturn ADCW; //Returns the ADC value of the chosen channel\n}\n\nvoid USART_init(void){\nUBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);\nUBRR0L = (uint8_t)(BAUD_PRESCALLER);\nUCSR0B = (1<<RXEN0)|(1<<TXEN0);\nUCSR0C = (3<<UCSZ00);\n}\n\nvoid USART_send( unsigned char data){\n\nwhile(!(UCSR0A & (1<<UDRE0)));\nUDR0 = data;\n}\n\nvoid USART_putstring(char* StringPtr){\n\nwhile(*StringPtr != 0x00){\nUSART_send(*StringPtr);\nStringPtr++;}\n\n}\n")))}u.isMDXComponent=!0}}]);