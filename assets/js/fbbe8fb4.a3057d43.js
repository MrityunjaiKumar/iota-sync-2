"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7079],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,a(a({ref:t},l),{},{components:n})):r.createElement(f,a({ref:t},l))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9722:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:3},a="WiFi Station Mode",s={unversionedId:"Arduino_ESP8266/Exp1_WiFI_STA",id:"Arduino_ESP8266/Exp1_WiFI_STA",title:"WiFi Station Mode",description:"Station Mode (STA) is what most people would consider the normal mode for a WiFi device. A device uses Station Mode to join a network that already exists, exactly like your smartphone does when its connects to your WiFi network at home",source:"@site/docs/03_Arduino_ESP8266/02_Exp1_WiFI_STA.md",sourceDirName:"03_Arduino_ESP8266",slug:"/Arduino_ESP8266/Exp1_WiFI_STA",permalink:"/docs/Arduino_ESP8266/Exp1_WiFI_STA",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"WiFi Access point",permalink:"/docs/Arduino_ESP8266/Exp1_WiFI_AP"},next:{title:"MQTT",permalink:"/docs/Arduino_ESP8266/Mqtt"}},c={},p=[],l={toc:p};function d(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,r.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"wifi-station-mode"},"WiFi Station Mode"),(0,i.kt)("p",null,"Station Mode (STA) is what most people would consider the normal mode for a WiFi device. A device uses Station Mode to join a network that already exists, exactly like your smartphone does when its connects to your WiFi network at home"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(3849).Z,width:"739",height:"541"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="WiFi Station Mode : get request example"',title:'"WiFi',Station:!0,Mode:!0,":":!0,get:!0,request:!0,'example"':!0},'\n\n#include <ESP8266WiFi.h>\n#include <ESP8266HTTPClient.h>\n \nconst char* ssid = "sincgrid";\nconst char* password = "sincgrid.com";\n \nvoid setup () {\n \n  Serial.begin(115200);\n \n  WiFi.begin(ssid, password);\n \n  while (WiFi.status() != WL_CONNECTED) {\n \n    delay(1000);\n    Serial.print(".");\n \n  }\n \n}\n \nvoid loop() {\n \n  if (WiFi.status() == WL_CONNECTED) { //Check WiFi connection status\n \n    HTTPClient http;  //Declare an object of class HTTPClient\n \n    http.begin("https://reqres.in/api/users?page=2");  //Specify request destination\n    int httpCode = http.GET();                                  //Send the request\n \n    if (httpCode > 0) { //Check the returning code\n \n      String payload = http.getString();   //Get the request response payload\n      Serial.println(payload);             //Print the response payload\n \n    }\n \n    http.end();   //Close connection\n \n  }\n \n  delay(10000);    //Send a request every 10 seconds\n}\n')))}d.isMDXComponent=!0},3849:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/ISP_IOTA_SYNC-a08bea2a97a5ecc8c4b4111c3366e84a.jpg"}}]);