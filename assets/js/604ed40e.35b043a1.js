"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7555],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=s(t),h=i,f=p["".concat(l,".").concat(h)]||p[h]||u[h]||a;return t?r.createElement(f,o(o({ref:n},d),{},{components:t})):r.createElement(f,o({ref:n},d))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8896:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=t(7462),i=(t(7294),t(3905));const a={sidebar_position:11},o="10 Experiment",c={unversionedId:"AVR_Embedded_C/Exp10",id:"AVR_Embedded_C/Exp10",title:"10 Experiment",description:"Thermistor value on serial monitor",source:"@site/docs/04_AVR_Embedded_C/10_Exp10.md",sourceDirName:"04_AVR_Embedded_C",slug:"/AVR_Embedded_C/Exp10",permalink:"/docs/AVR_Embedded_C/Exp10",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"09 Experiment",permalink:"/docs/AVR_Embedded_C/Exp9"},next:{title:"Sim800L Tutorials",permalink:"/docs/category/sim800l-tutorials"}},l={},s=[{value:"Source  and description",id:"source--and-description",level:2}],d={toc:s};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"10-experiment"},"10 Experiment"),(0,i.kt)("p",null,"Thermistor value on serial monitor"),(0,i.kt)("h2",{id:"source--and-description"},"Source  and description"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://sincgrid.in/avr-tutorials/avr-tutorial-experiment-10/"},"http://sincgrid.in/avr-tutorials/avr-tutorial-experiment-10/")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="http://sincgrid.in/avr-tutorials/avr-tutorial-experiment-10/"',title:'"http://sincgrid.in/avr-tutorials/avr-tutorial-experiment-10/"'},'#include <avr/io.h>\n#include <stdlib.h>  //for itoa\n#define F_CPU 16000000UL\n#include <util/delay.h>\n#define BAUDRATE 9600\n#define BAUD_PRESCALLER (((F_CPU / (BAUDRATE * 16UL))) - 1)\n\nuint16_t adc_value;            //Variable used to store the value read from the ADC\nchar buffer[5];                //Output of the itoa function\nuint8_t i=0;                    //Variable for the for() loop\n\nvoid adc_init(void);            //Function to initialize/configure the ADC\nuint16_t read_adc(uint8_t channel);    //Function to read an arbitrary analogic channel/pin\nvoid USART_init(void);            //Function to initialize and configure the USART/serial\nvoid USART_send( unsigned char data);    //Function that sends a char over the serial port\nvoid USART_putstring(char* StringPtr);    //Function that sends a string over the serial port\n\nint main(void){\nadc_init();        //Setup the ADC\nUSART_init();        //Setup the USART\n\nfor(;;){        //Our infinite loop\n USART_putstring("Reading channel A0");\n USART_putstring(" : ");         //Just to keep things pretty\n adc_value = read_adc(0);        //Read one ADC channel\n itoa(adc_value, buffer, 10);    //Convert the read value to an ascii string\n /*char *  itoa ( int value, char * str, int base );*/\n USART_putstring(buffer);        //Send the converted value to the terminal\n USART_putstring("  ");          //Some more formatting\n _delay_ms(100);                 //You can tweak this value to have slower\n                                         //or faster readings or for max speed remove this line\n\n USART_send(\'\\r\');\n USART_send(\'\\n\');                //This two lines are to tell to the terminal to change line\n}\n\nreturn 0;\n}\n\nvoid adc_init(void){\n ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock\n ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)\n ADCSRA |= (1<<ADEN);                //Turn on ADC\n ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest\n                                              //and to ensure that everything is up and running\n}\n\nuint16_t read_adc(uint8_t channel){\n ADMUX &= 0xF0;                    //Clear the older channel that was read\n ADMUX |= channel;                //Defines the new ADC channel to be read\n ADCSRA |= (1<<ADSC);                //Starts a new conversion\n while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done\n return ADCW;                    //Returns the ADC value of the chosen channel\n}\n\nvoid USART_init(void){\n UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);\n UBRR0L = (uint8_t)(BAUD_PRESCALLER);\n UCSR0B = (1<<RXEN0)|(1<<TXEN0);\n UCSR0C = (3<<UCSZ00);\n}\n\nvoid USART_send( unsigned char data){\n\n while(!(UCSR0A & (1<<UDRE0)));\n UDR0 = data;\n}\n\nvoid USART_putstring(char* StringPtr){\n\nwhile(*StringPtr != 0x00){\n USART_send(*StringPtr);\n StringPtr++;}\n\n}\n')))}u.isMDXComponent=!0}}]);